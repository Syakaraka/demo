<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--xml文件根为mapper，后面为对应mapper名-->
<mapper namespace="com.nowcoder.community.dao.UserMapper">

    <sql id="selectFields">
        id,username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>

    <sql id="insertFields">
        username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>

<!--mapper里面写各种标签，每一个对应接口中的方法-->
    <select id="selectById" resultType="User"><!--查询标签，返回类型为User，不用写全路径因为application里写了实现类所在包名-->
    select <include refid="selectFields"></include>
    from user
    where id = #{id}<!--引入方法的参数id-->
    </select>

    <select id="selectByName" resultType="User"><!--查询标签，返回类型为User，不用写全路径因为application里写了实现类所在包名-->
        select <include refid="selectFields"></include>
        from user
        where username = #{username}<!--引入方法的参数id-->
    </select>

    <select id="selectByEmail" resultType="User"><!--查询标签，返回类型为User，不用写全路径因为application里写了实现类所在包名-->
        select <include refid="selectFields"></include>
        from user
        where email = #{email}<!--引入方法的参数id-->
    </select>

    <!--增加-->
    <insert id="insertUser" parameterType="User" keyProperty="id"><!--自动生成填入属性id-->
        insert into user(<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})<!--插入数据的来源为方法参数-->
    </insert>

    <!--修改-->
    <update id="updateStatus">
        update user set status=#{status} where id=#{id}
    </update>
    <update id="updateHeader">
        update user set header_url=#{headerUrl} where id=#{id}
    </update>
    <update id="updatePassword">
        update user set password=#{password} where id=#{id}
    </update>

</mapper>